// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace eqproto {
class ChannelMessage;
class ChannelMessageDefaultTypeInternal;
extern ChannelMessageDefaultTypeInternal _ChannelMessage_default_instance_;
class CommandMessage;
class CommandMessageDefaultTypeInternal;
extern CommandMessageDefaultTypeInternal _CommandMessage_default_instance_;
class DailyGain;
class DailyGainDefaultTypeInternal;
extern DailyGainDefaultTypeInternal _DailyGain_default_instance_;
class Entity;
class EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
class EntityEvent;
class EntityEventDefaultTypeInternal;
extern EntityEventDefaultTypeInternal _EntityEvent_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
}  // namespace eqproto

namespace eqproto {

namespace protobuf_message_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_message_2eproto

enum OpCode {
  OP_Unknown = 0,
  OP_ExploreUnknown = 1,
  OP_0x0193 = 2,
  OP_0x0347 = 3,
  OP_AAAction = 4,
  OP_AAExpUpdate = 5,
  OP_AcceptNewTask = 6,
  OP_AckPacket = 7,
  OP_Action = 8,
  OP_Action2 = 9,
  OP_AddNimbusEffect = 10,
  OP_AdventureData = 11,
  OP_AdventureDetails = 12,
  OP_AdventureFinish = 13,
  OP_AdventureInfo = 14,
  OP_AdventureInfoRequest = 15,
  OP_AdventureLeaderboardReply = 16,
  OP_AdventureLeaderboardRequest = 17,
  OP_AdventureMerchantPurchase = 18,
  OP_AdventureMerchantRequest = 19,
  OP_AdventureMerchantResponse = 20,
  OP_AdventureMerchantSell = 21,
  OP_AdventurePointsUpdate = 22,
  OP_AdventureRequest = 23,
  OP_AdventureStatsReply = 24,
  OP_AdventureStatsRequest = 25,
  OP_AdventureUpdate = 26,
  OP_AggroMeterLockTarget = 27,
  OP_AggroMeterTargetInfo = 28,
  OP_AggroMeterUpdate = 29,
  OP_AltCurrency = 30,
  OP_AltCurrencyMerchantReply = 31,
  OP_AltCurrencyMerchantRequest = 32,
  OP_AltCurrencyPurchase = 33,
  OP_AltCurrencyReclaim = 34,
  OP_AltCurrencySell = 35,
  OP_AltCurrencySellSelection = 36,
  OP_Animation = 37,
  OP_AnnoyingZoneUnknown = 38,
  OP_ApplyPoison = 39,
  OP_ApproveName = 40,
  OP_ApproveWorld = 41,
  OP_ApproveZone = 42,
  OP_Assist = 43,
  OP_AssistGroup = 44,
  OP_AugmentInfo = 45,
  OP_AugmentItem = 46,
  OP_AutoAttack = 47,
  OP_AutoAttack2 = 48,
  OP_AutoFire = 49,
  OP_Bandolier = 50,
  OP_BankerChange = 51,
  OP_Barter = 52,
  OP_Bazaar = 53,
  OP_BazaarInspect = 54,
  OP_BazaarSearch = 55,
  OP_BecomeCorpse = 56,
  OP_BecomeTrader = 57,
  OP_Begging = 58,
  OP_BeginCast = 59,
  OP_Bind_Wound = 60,
  OP_BlockedBuffs = 61,
  OP_BoardBoat = 62,
  OP_Buff = 63,
  OP_BuffCreate = 64,
  OP_BuffRemoveRequest = 65,
  OP_Bug = 66,
  OP_CameraEffect = 67,
  OP_Camp = 68,
  OP_CancelSneakHide = 69,
  OP_CancelTask = 70,
  OP_CancelTrade = 71,
  OP_CastSpell = 72,
  OP_ChangeSize = 73,
  OP_ChannelMessage = 74,
  OP_CharacterCreate = 75,
  OP_CharacterCreateRequest = 76,
  OP_CharInventory = 77,
  OP_Charm = 78,
  OP_ChatMessage = 79,
  OP_ClearAA = 80,
  OP_ClearBlockedBuffs = 81,
  OP_ClearLeadershipAbilities = 82,
  OP_ClearNPCMarks = 83,
  OP_ClearObject = 84,
  OP_ClearSurname = 85,
  OP_ClickDoor = 86,
  OP_ClickObject = 87,
  OP_ClickObjectAction = 88,
  OP_ClientError = 89,
  OP_ClientReady = 90,
  OP_ClientTimeStamp = 91,
  OP_ClientUpdate = 92,
  OP_CloseContainer = 93,
  OP_CloseTributeMaster = 94,
  OP_ColoredText = 95,
  OP_CombatAbility = 96,
  OP_Command = 97,
  OP_CompletedTasks = 98,
  OP_ConfirmDelete = 99,
  OP_Consent = 100,
  OP_ConsentDeny = 101,
  OP_ConsentResponse = 102,
  OP_Consider = 103,
  OP_ConsiderCorpse = 104,
  OP_Consume = 105,
  OP_ControlBoat = 106,
  OP_CorpseDrag = 107,
  OP_CorpseDrop = 108,
  OP_CrashDump = 109,
  OP_CrystalCountUpdate = 110,
  OP_CrystalCreate = 111,
  OP_CrystalReclaim = 112,
  OP_CustomTitles = 113,
  OP_Damage = 114,
  OP_Death = 115,
  OP_DelegateAbility = 116,
  OP_DeleteCharacter = 117,
  OP_DeleteCharge = 118,
  OP_DeleteItem = 119,
  OP_DeletePetition = 120,
  OP_DeleteSpawn = 121,
  OP_DeleteSpell = 122,
  OP_DenyResponse = 123,
  OP_Disarm = 124,
  OP_DisarmTraps = 125,
  OP_DisciplineTimer = 126,
  OP_DisciplineUpdate = 127,
  OP_DiscordMerchantInventory = 128,
  OP_DoGroupLeadershipAbility = 129,
  OP_DuelResponse = 130,
  OP_DuelResponse2 = 131,
  OP_DumpName = 132,
  OP_Dye = 133,
  OP_DynamicWall = 134,
  OP_DzAddPlayer = 135,
  OP_DzChooseZone = 136,
  OP_DzCompass = 137,
  OP_DzExpeditionEndsWarning = 138,
  OP_DzExpeditionInfo = 139,
  OP_DzExpeditionList = 140,
  OP_DzJoinExpeditionConfirm = 141,
  OP_DzJoinExpeditionReply = 142,
  OP_DzLeaderStatus = 143,
  OP_DzListTimers = 144,
  OP_DzMakeLeader = 145,
  OP_DzMemberList = 146,
  OP_DzMemberStatus = 147,
  OP_DzPlayerList = 148,
  OP_DzQuit = 149,
  OP_DzRemovePlayer = 150,
  OP_DzSwapPlayer = 151,
  OP_Emote = 152,
  OP_EndLootRequest = 153,
  OP_EnduranceUpdate = 154,
  OP_EnterChat = 155,
  OP_EnterWorld = 156,
  OP_EnvDamage = 157,
  OP_ExpansionInfo = 158,
  OP_ExpUpdate = 159,
  OP_FaceChange = 160,
  OP_Feedback = 161,
  OP_FeignDeath = 162,
  OP_FellowshipUpdate = 163,
  OP_FindPersonReply = 164,
  OP_FindPersonRequest = 165,
  OP_FinishTrade = 166,
  OP_FinishWindow = 167,
  OP_FinishWindow2 = 168,
  OP_Fishing = 169,
  OP_Fling = 170,
  OP_FloatListThing = 171,
  OP_Forage = 172,
  OP_ForceFindPerson = 173,
  OP_FormattedMessage = 174,
  OP_FriendsWho = 175,
  OP_GetGuildMOTD = 176,
  OP_GetGuildMOTDReply = 177,
  OP_GetGuildsList = 178,
  OP_GiveMoney = 179,
  OP_GMApproval = 180,
  OP_GMBecomeNPC = 181,
  OP_GMDelCorpse = 182,
  OP_GMEmoteZone = 183,
  OP_GMEndTraining = 184,
  OP_GMEndTrainingResponse = 185,
  OP_GMFind = 186,
  OP_GMGoto = 187,
  OP_GMHideMe = 188,
  OP_GMKick = 189,
  OP_GMKill = 190,
  OP_GMLastName = 191,
  OP_GMNameChange = 192,
  OP_GMSearchCorpse = 193,
  OP_GMServers = 194,
  OP_GMSummon = 195,
  OP_GMToggle = 196,
  OP_GMTraining = 197,
  OP_GMTrainSkill = 198,
  OP_GMTrainSkillConfirm = 199,
  OP_GMZoneRequest = 200,
  OP_GMZoneRequest2 = 201,
  OP_GroundSpawn = 202,
  OP_GroupAcknowledge = 203,
  OP_GroupCancelInvite = 204,
  OP_GroupDelete = 205,
  OP_GroupDisband = 206,
  OP_GroupDisbandOther = 207,
  OP_GroupDisbandYou = 208,
  OP_GroupFollow = 209,
  OP_GroupFollow2 = 210,
  OP_GroupInvite = 211,
  OP_GroupInvite2 = 212,
  OP_GroupLeaderChange = 213,
  OP_GroupLeadershipAAUpdate = 214,
  OP_GroupMakeLeader = 215,
  OP_GroupMentor = 216,
  OP_GroupRoles = 217,
  OP_GroupUpdate = 218,
  OP_GroupUpdateB = 219,
  OP_GroupUpdateLeaderAA = 220,
  OP_GuildBank = 221,
  OP_GuildBankItemList = 222,
  OP_GuildCreate = 223,
  OP_GuildDelete = 224,
  OP_GuildDemote = 225,
  OP_GuildInvite = 226,
  OP_GuildInviteAccept = 227,
  OP_GuildLeader = 228,
  OP_GuildManageAdd = 229,
  OP_GuildManageBanker = 230,
  OP_GuildManageRemove = 231,
  OP_GuildManageStatus = 232,
  OP_GuildMemberLevelUpdate = 233,
  OP_GuildMemberList = 234,
  OP_GuildMemberUpdate = 235,
  OP_GuildMOTD = 236,
  OP_GuildPeace = 237,
  OP_GuildPromote = 238,
  OP_GuildPublicNote = 239,
  OP_GuildRemove = 240,
  OP_GuildsList = 241,
  OP_GuildStatus = 242,
  OP_GuildTributeInfo = 243,
  OP_GuildUpdateURLAndChannel = 244,
  OP_GuildWar = 245,
  OP_Heartbeat = 246,
  OP_Hide = 247,
  OP_HideCorpse = 248,
  OP_HPUpdate = 249,
  OP_Illusion = 250,
  OP_IncreaseStats = 251,
  OP_InitialHPUpdate = 252,
  OP_InitialMobHealth = 253,
  OP_InspectAnswer = 254,
  OP_InspectBuffs = 255,
  OP_InspectMessageUpdate = 256,
  OP_InspectRequest = 257,
  OP_InstillDoubt = 258,
  OP_InterruptCast = 259,
  OP_ItemLinkClick = 260,
  OP_ItemLinkResponse = 261,
  OP_ItemLinkText = 262,
  OP_ItemName = 263,
  OP_ItemPacket = 264,
  OP_ItemPreview = 265,
  OP_ItemRecastDelay = 266,
  OP_ItemVerifyReply = 267,
  OP_ItemVerifyRequest = 268,
  OP_ItemViewUnknown = 269,
  OP_Jump = 270,
  OP_KeyRing = 271,
  OP_KnowledgeBase = 272,
  OP_LDoNButton = 273,
  OP_LDoNDisarmTraps = 274,
  OP_LDoNInspect = 275,
  OP_LDoNOpen = 276,
  OP_LDoNPickLock = 277,
  OP_LDoNSenseTraps = 278,
  OP_LeadershipExpToggle = 279,
  OP_LeadershipExpUpdate = 280,
  OP_LeaveAdventure = 281,
  OP_LeaveBoat = 282,
  OP_LevelAppearance = 283,
  OP_LevelUpdate = 284,
  OP_LFGAppearance = 285,
  OP_LFGCommand = 286,
  OP_LFGGetMatchesRequest = 287,
  OP_LFGGetMatchesResponse = 288,
  OP_LFGResponse = 289,
  OP_LFGuild = 290,
  OP_LFPCommand = 291,
  OP_LFPGetMatchesRequest = 292,
  OP_LFPGetMatchesResponse = 293,
  OP_LinkedReuse = 294,
  OP_LoadSpellSet = 295,
  OP_LocInfo = 296,
  OP_LockoutTimerInfo = 297,
  OP_Login = 298,
  OP_LoginAccepted = 299,
  OP_LoginComplete = 300,
  OP_LoginUnknown1 = 301,
  OP_LoginUnknown2 = 302,
  OP_Logout = 303,
  OP_LogoutReply = 304,
  OP_LogServer = 305,
  OP_LootComplete = 306,
  OP_LootItem = 307,
  OP_LootRequest = 308,
  OP_ManaChange = 309,
  OP_ManaUpdate = 310,
  OP_MarkNPC = 311,
  OP_Marquee = 312,
  OP_MemorizeSpell = 313,
  OP_Mend = 314,
  OP_MendHPUpdate = 315,
  OP_MercenaryAssign = 316,
  OP_MercenaryCommand = 317,
  OP_MercenaryDataRequest = 318,
  OP_MercenaryDataResponse = 319,
  OP_MercenaryDataUpdate = 320,
  OP_MercenaryDataUpdateRequest = 321,
  OP_MercenaryDismiss = 322,
  OP_MercenaryHire = 323,
  OP_MercenarySuspendRequest = 324,
  OP_MercenarySuspendResponse = 325,
  OP_MercenaryTimer = 326,
  OP_MercenaryTimerRequest = 327,
  OP_MercenaryUnknown1 = 328,
  OP_MercenaryUnsuspendResponse = 329,
  OP_MobEnduranceUpdate = 330,
  OP_MobHealth = 331,
  OP_MobManaUpdate = 332,
  OP_MobRename = 333,
  OP_MobUpdate = 334,
  OP_MoneyOnCorpse = 335,
  OP_MoneyUpdate = 336,
  OP_MOTD = 337,
  OP_MoveCoin = 338,
  OP_MoveDoor = 339,
  OP_MoveItem = 340,
  OP_MoveLogDisregard = 341,
  OP_MoveLogRequest = 342,
  OP_MultiLineMsg = 343,
  OP_NewSpawn = 344,
  OP_NewTitlesAvailable = 345,
  OP_NewZone = 346,
  OP_OnLevelMessage = 347,
  OP_OpenContainer = 348,
  OP_OpenDiscordMerchant = 349,
  OP_OpenGuildTributeMaster = 350,
  OP_OpenInventory = 351,
  OP_OpenNewTasksWindow = 352,
  OP_OpenTributeMaster = 353,
  OP_PDeletePetition = 354,
  OP_PetBuffWindow = 355,
  OP_PetCommands = 356,
  OP_PetCommandState = 357,
  OP_PetHoTT = 358,
  OP_Petition = 359,
  OP_PetitionBug = 360,
  OP_PetitionCheckIn = 361,
  OP_PetitionCheckout = 362,
  OP_PetitionCheckout2 = 363,
  OP_PetitionDelete = 364,
  OP_PetitionQue = 365,
  OP_PetitionRefresh = 366,
  OP_PetitionResolve = 367,
  OP_PetitionSearch = 368,
  OP_PetitionSearchResults = 369,
  OP_PetitionSearchText = 370,
  OP_PetitionUnCheckout = 371,
  OP_PetitionUpdate = 372,
  OP_PickPocket = 373,
  OP_PlayerProfile = 374,
  OP_PlayerStateAdd = 375,
  OP_PlayerStateRemove = 376,
  OP_PlayEverquestRequest = 377,
  OP_PlayEverquestResponse = 378,
  OP_PlayMP3 = 379,
  OP_Poll = 380,
  OP_PollResponse = 381,
  OP_PopupResponse = 382,
  OP_PostEnterWorld = 383,
  OP_PotionBelt = 384,
  OP_PreLogoutReply = 385,
  OP_PurchaseLeadershipAA = 386,
  OP_PVPLeaderBoardDetailsReply = 387,
  OP_PVPLeaderBoardDetailsRequest = 388,
  OP_PVPLeaderBoardReply = 389,
  OP_PVPLeaderBoardRequest = 390,
  OP_PVPStats = 391,
  OP_QueryResponseThing = 392,
  OP_RaidInvite = 393,
  OP_RaidJoin = 394,
  OP_RaidUpdate = 395,
  OP_RandomNameGenerator = 396,
  OP_RandomReply = 397,
  OP_RandomReq = 398,
  OP_ReadBook = 399,
  OP_RecipeAutoCombine = 400,
  OP_RecipeDetails = 401,
  OP_RecipeReply = 402,
  OP_RecipesFavorite = 403,
  OP_RecipesSearch = 404,
  OP_ReclaimCrystals = 405,
  OP_ReloadUI = 406,
  OP_RemoveAllDoors = 407,
  OP_RemoveBlockedBuffs = 408,
  OP_RemoveNimbusEffect = 409,
  OP_RemoveTrap = 410,
  OP_Report = 411,
  OP_ReqClientSpawn = 412,
  OP_ReqNewZone = 413,
  OP_RequestClientZoneChange = 414,
  OP_RequestDuel = 415,
  OP_RequestKnowledgeBase = 416,
  OP_RequestTitles = 417,
  OP_RespawnWindow = 418,
  OP_RespondAA = 419,
  OP_RestState = 420,
  OP_Rewind = 421,
  OP_RezzAnswer = 422,
  OP_RezzComplete = 423,
  OP_RezzRequest = 424,
  OP_Sacrifice = 425,
  OP_SafeFallSuccess = 426,
  OP_SafePoint = 427,
  OP_Save = 428,
  OP_SaveOnZoneReq = 429,
  OP_SelectTribute = 430,
  OP_SendAAStats = 431,
  OP_SendAATable = 432,
  OP_SendCharInfo = 433,
  OP_SendExpZonein = 434,
  OP_SendFindableNPCs = 435,
  OP_SendGuildTributes = 436,
  OP_SendLoginInfo = 437,
  OP_SendMaxCharacters = 438,
  OP_SendMembership = 439,
  OP_SendMembershipDetails = 440,
  OP_SendSystemStats = 441,
  OP_SendTitleList = 442,
  OP_SendTributes = 443,
  OP_SendZonepoints = 444,
  OP_SenseHeading = 445,
  OP_SenseTraps = 446,
  OP_ServerListRequest = 447,
  OP_ServerListResponse = 448,
  OP_SessionReady = 449,
  OP_SetChatServer = 450,
  OP_SetChatServer2 = 451,
  OP_SetGroupTarget = 452,
  OP_SetGuildMOTD = 453,
  OP_SetGuildRank = 454,
  OP_SetRunMode = 455,
  OP_SetServerFilter = 456,
  OP_SetStartCity = 457,
  OP_SetTitle = 458,
  OP_SetTitleReply = 459,
  OP_Shielding = 460,
  OP_ShopDelItem = 461,
  OP_ShopEnd = 462,
  OP_ShopEndConfirm = 463,
  OP_ShopItem = 464,
  OP_ShopPlayerBuy = 465,
  OP_ShopPlayerSell = 466,
  OP_ShopRequest = 467,
  OP_SimpleMessage = 468,
  OP_SkillUpdate = 469,
  OP_Sneak = 470,
  OP_Some3ByteHPUpdate = 471,
  OP_Some6ByteHPUpdate = 472,
  OP_SomeItemPacketMaybe = 473,
  OP_Sound = 474,
  OP_SpawnAppearance = 475,
  OP_SpawnDoor = 476,
  OP_SpawnPositionUpdate = 477,
  OP_SpecialMesg = 478,
  OP_SpellEffect = 479,
  OP_Split = 480,
  OP_Stamina = 481,
  OP_Stun = 482,
  OP_Surname = 483,
  OP_SwapSpell = 484,
  OP_TargetBuffs = 485,
  OP_TargetCommand = 486,
  OP_TargetHoTT = 487,
  OP_TargetMouse = 488,
  OP_TargetReject = 489,
  OP_TaskActivity = 490,
  OP_TaskActivityComplete = 491,
  OP_TaskDescription = 492,
  OP_TaskHistoryReply = 493,
  OP_TaskHistoryRequest = 494,
  OP_TaskMemberList = 495,
  OP_Taunt = 496,
  OP_TestBuff = 497,
  OP_TGB = 498,
  OP_TimeOfDay = 499,
  OP_Track = 500,
  OP_TrackTarget = 501,
  OP_TrackUnknown = 502,
  OP_TradeAcceptClick = 503,
  OP_TradeBusy = 504,
  OP_TradeCoins = 505,
  OP_TradeMoneyUpdate = 506,
  OP_Trader = 507,
  OP_TraderBuy = 508,
  OP_TraderDelItem = 509,
  OP_TradeRequest = 510,
  OP_TradeRequestAck = 511,
  OP_TraderItemUpdate = 512,
  OP_TraderShop = 513,
  OP_TradeSkillCombine = 514,
  OP_Translocate = 515,
  OP_TributeInfo = 516,
  OP_TributeItem = 517,
  OP_TributeMoney = 518,
  OP_TributeNPC = 519,
  OP_TributePointUpdate = 520,
  OP_TributeTimer = 521,
  OP_TributeToggle = 522,
  OP_TributeUpdate = 523,
  OP_Untargetable = 524,
  OP_UpdateAA = 525,
  OP_UpdateAura = 526,
  OP_UpdateLeadershipAA = 527,
  OP_VetClaimReply = 528,
  OP_VetClaimRequest = 529,
  OP_VetRewardsAvaliable = 530,
  OP_VoiceMacroIn = 531,
  OP_VoiceMacroOut = 532,
  OP_WeaponEquip1 = 533,
  OP_WearChange = 534,
  OP_Weather = 535,
  OP_Weblink = 536,
  OP_WhoAllRequest = 537,
  OP_WhoAllResponse = 538,
  OP_World_Client_CRC1 = 539,
  OP_World_Client_CRC2 = 540,
  OP_WorldClientReady = 541,
  OP_WorldComplete = 542,
  OP_WorldLogout = 543,
  OP_WorldObjectsSent = 544,
  OP_WorldUnknown001 = 545,
  OP_XTargetAutoAddHaters = 546,
  OP_XTargetOpen = 547,
  OP_XTargetOpenResponse = 548,
  OP_XTargetRequest = 549,
  OP_XTargetResponse = 550,
  OP_YellForHelp = 551,
  OP_ZoneChange = 552,
  OP_ZoneComplete = 553,
  OP_ZoneEntry = 554,
  OP_ZoneGuildList = 555,
  OP_ZoneInUnknown = 556,
  OP_ZonePlayerToBind = 557,
  OP_ZoneServerInfo = 558,
  OP_ZoneServerReady = 559,
  OP_ZoneSpawns = 560,
  OP_ZoneUnavail = 561,
  OP_ResetAA = 562,
  OP_Buddy = 563,
  OP_ChannelAnnounceJoin = 564,
  OP_ChannelAnnounceLeave = 565,
  OP_Ignore = 566,
  OP_Mail = 567,
  OP_MailboxChange = 568,
  OP_MailDeliveryStatus = 569,
  OP_MailHeader = 570,
  OP_MailHeaderCount = 571,
  OP_MailLogin = 572,
  OP_MailNew = 573,
  OP_MailSendBody = 574,
  OpCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OpCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OpCode_IsValid(int value);
const OpCode OpCode_MIN = OP_Unknown;
const OpCode OpCode_MAX = OP_MailSendBody;
const int OpCode_ARRAYSIZE = OpCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* OpCode_descriptor();
inline const ::std::string& OpCode_Name(OpCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    OpCode_descriptor(), value);
}
inline bool OpCode_Parse(
    const ::std::string& name, OpCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpCode>(
    OpCode_descriptor(), name, value);
}
// ===================================================================

class ChannelMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eqproto.ChannelMessage) */ {
 public:
  ChannelMessage();
  virtual ~ChannelMessage();

  ChannelMessage(const ChannelMessage& from);

  inline ChannelMessage& operator=(const ChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelMessage(ChannelMessage&& from) noexcept
    : ChannelMessage() {
    *this = ::std::move(from);
  }

  inline ChannelMessage& operator=(ChannelMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelMessage& default_instance();

  static inline const ChannelMessage* internal_default_instance() {
    return reinterpret_cast<const ChannelMessage*>(
               &_ChannelMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ChannelMessage* other);
  friend void swap(ChannelMessage& a, ChannelMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelMessage& from);
  void MergeFrom(const ChannelMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from = 3;
  void clear_from();
  static const int kFromFieldNumber = 3;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // string to = 4;
  void clear_to();
  static const int kToFieldNumber = 4;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // string message = 5;
  void clear_message();
  static const int kMessageFieldNumber = 5;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string deliverto = 7;
  void clear_deliverto();
  static const int kDelivertoFieldNumber = 7;
  const ::std::string& deliverto() const;
  void set_deliverto(const ::std::string& value);
  #if LANG_CXX11
  void set_deliverto(::std::string&& value);
  #endif
  void set_deliverto(const char* value);
  void set_deliverto(const char* value, size_t size);
  ::std::string* mutable_deliverto();
  ::std::string* release_deliverto();
  void set_allocated_deliverto(::std::string* deliverto);

  // int32 chan_num = 1;
  void clear_chan_num();
  static const int kChanNumFieldNumber = 1;
  ::google::protobuf::int32 chan_num() const;
  void set_chan_num(::google::protobuf::int32 value);

  // int32 language = 2;
  void clear_language();
  static const int kLanguageFieldNumber = 2;
  ::google::protobuf::int32 language() const;
  void set_language(::google::protobuf::int32 value);

  // int32 guilddbid = 6;
  void clear_guilddbid();
  static const int kGuilddbidFieldNumber = 6;
  ::google::protobuf::int32 guilddbid() const;
  void set_guilddbid(::google::protobuf::int32 value);

  // int32 type = 8;
  void clear_type();
  static const int kTypeFieldNumber = 8;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 minstatus = 9;
  void clear_minstatus();
  static const int kMinstatusFieldNumber = 9;
  ::google::protobuf::int32 minstatus() const;
  void set_minstatus(::google::protobuf::int32 value);

  // int32 fromadmin = 10;
  void clear_fromadmin();
  static const int kFromadminFieldNumber = 10;
  ::google::protobuf::int32 fromadmin() const;
  void set_fromadmin(::google::protobuf::int32 value);

  // bool noreply = 11;
  void clear_noreply();
  static const int kNoreplyFieldNumber = 11;
  bool noreply() const;
  void set_noreply(bool value);

  // bool is_emote = 12;
  void clear_is_emote();
  static const int kIsEmoteFieldNumber = 12;
  bool is_emote() const;
  void set_is_emote(bool value);

  // int32 queued = 13;
  void clear_queued();
  static const int kQueuedFieldNumber = 13;
  ::google::protobuf::int32 queued() const;
  void set_queued(::google::protobuf::int32 value);

  // int32 zone_id = 14;
  void clear_zone_id();
  static const int kZoneIdFieldNumber = 14;
  ::google::protobuf::int32 zone_id() const;
  void set_zone_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eqproto.ChannelMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr deliverto_;
  ::google::protobuf::int32 chan_num_;
  ::google::protobuf::int32 language_;
  ::google::protobuf::int32 guilddbid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 minstatus_;
  ::google::protobuf::int32 fromadmin_;
  bool noreply_;
  bool is_emote_;
  ::google::protobuf::int32 queued_;
  ::google::protobuf::int32 zone_id_;
  mutable int _cached_size_;
  friend struct protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommandMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eqproto.CommandMessage) */ {
 public:
  CommandMessage();
  virtual ~CommandMessage();

  CommandMessage(const CommandMessage& from);

  inline CommandMessage& operator=(const CommandMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommandMessage(CommandMessage&& from) noexcept
    : CommandMessage() {
    *this = ::std::move(from);
  }

  inline CommandMessage& operator=(CommandMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandMessage& default_instance();

  static inline const CommandMessage* internal_default_instance() {
    return reinterpret_cast<const CommandMessage*>(
               &_CommandMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CommandMessage* other);
  friend void swap(CommandMessage& a, CommandMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommandMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  CommandMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommandMessage& from);
  void MergeFrom(const CommandMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommandMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string params = 3;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::std::string& params(int index) const;
  ::std::string* mutable_params(int index);
  void set_params(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_params(int index, ::std::string&& value);
  #endif
  void set_params(int index, const char* value);
  void set_params(int index, const char* value, size_t size);
  ::std::string* add_params();
  void add_params(const ::std::string& value);
  #if LANG_CXX11
  void add_params(::std::string&& value);
  #endif
  void add_params(const char* value);
  void add_params(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& params() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_params();

  // string author = 1;
  void clear_author();
  static const int kAuthorFieldNumber = 1;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  #if LANG_CXX11
  void set_author(::std::string&& value);
  #endif
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);

  // string command = 2;
  void clear_command();
  static const int kCommandFieldNumber = 2;
  const ::std::string& command() const;
  void set_command(const ::std::string& value);
  #if LANG_CXX11
  void set_command(::std::string&& value);
  #endif
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  ::std::string* mutable_command();
  ::std::string* release_command();
  void set_allocated_command(::std::string* command);

  // string result = 4;
  void clear_result();
  static const int kResultFieldNumber = 4;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:eqproto.CommandMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> params_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  ::google::protobuf::internal::ArenaStringPtr command_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  mutable int _cached_size_;
  friend struct protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DailyGain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eqproto.DailyGain) */ {
 public:
  DailyGain();
  virtual ~DailyGain();

  DailyGain(const DailyGain& from);

  inline DailyGain& operator=(const DailyGain& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DailyGain(DailyGain&& from) noexcept
    : DailyGain() {
    *this = ::std::move(from);
  }

  inline DailyGain& operator=(DailyGain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DailyGain& default_instance();

  static inline const DailyGain* internal_default_instance() {
    return reinterpret_cast<const DailyGain*>(
               &_DailyGain_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DailyGain* other);
  friend void swap(DailyGain& a, DailyGain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DailyGain* New() const PROTOBUF_FINAL { return New(NULL); }

  DailyGain* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DailyGain& from);
  void MergeFrom(const DailyGain& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DailyGain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string identity = 6;
  void clear_identity();
  static const int kIdentityFieldNumber = 6;
  const ::std::string& identity() const;
  void set_identity(const ::std::string& value);
  #if LANG_CXX11
  void set_identity(::std::string&& value);
  #endif
  void set_identity(const char* value);
  void set_identity(const char* value, size_t size);
  ::std::string* mutable_identity();
  ::std::string* release_identity();
  void set_allocated_identity(::std::string* identity);

  // int32 account_id = 1;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::int32 account_id() const;
  void set_account_id(::google::protobuf::int32 value);

  // int32 character_id = 2;
  void clear_character_id();
  static const int kCharacterIdFieldNumber = 2;
  ::google::protobuf::int32 character_id() const;
  void set_character_id(::google::protobuf::int32 value);

  // int32 levels_gained = 3;
  void clear_levels_gained();
  static const int kLevelsGainedFieldNumber = 3;
  ::google::protobuf::int32 levels_gained() const;
  void set_levels_gained(::google::protobuf::int32 value);

  // int32 experience_gained = 4;
  void clear_experience_gained();
  static const int kExperienceGainedFieldNumber = 4;
  ::google::protobuf::int32 experience_gained() const;
  void set_experience_gained(::google::protobuf::int32 value);

  // int32 money_earned = 5;
  void clear_money_earned();
  static const int kMoneyEarnedFieldNumber = 5;
  ::google::protobuf::int32 money_earned() const;
  void set_money_earned(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eqproto.DailyGain)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr identity_;
  ::google::protobuf::int32 account_id_;
  ::google::protobuf::int32 character_id_;
  ::google::protobuf::int32 levels_gained_;
  ::google::protobuf::int32 experience_gained_;
  ::google::protobuf::int32 money_earned_;
  mutable int _cached_size_;
  friend struct protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Entity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eqproto.Entity) */ {
 public:
  Entity();
  virtual ~Entity();

  Entity(const Entity& from);

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Entity(Entity&& from) noexcept
    : Entity() {
    *this = ::std::move(from);
  }

  inline Entity& operator=(Entity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Entity& default_instance();

  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
               &_Entity_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Entity* other);
  friend void swap(Entity& a, Entity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Entity* New() const PROTOBUF_FINAL { return New(NULL); }

  Entity* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Entity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .eqproto.Position position = 6;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 6;
  const ::eqproto::Position& position() const;
  ::eqproto::Position* mutable_position();
  ::eqproto::Position* release_position();
  void set_allocated_position(::eqproto::Position* position);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 hp = 4;
  void clear_hp();
  static const int kHpFieldNumber = 4;
  ::google::protobuf::int32 hp() const;
  void set_hp(::google::protobuf::int32 value);

  // int32 level = 5;
  void clear_level();
  static const int kLevelFieldNumber = 5;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // int32 race = 7;
  void clear_race();
  static const int kRaceFieldNumber = 7;
  ::google::protobuf::int32 race() const;
  void set_race(::google::protobuf::int32 value);

  // int32 class = 8;
  void clear_class_();
  static const int kClassFieldNumber = 8;
  ::google::protobuf::int32 class_() const;
  void set_class_(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eqproto.Entity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::eqproto::Position* position_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 race_;
  ::google::protobuf::int32 class__;
  mutable int _cached_size_;
  friend struct protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eqproto.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const PROTOBUF_FINAL { return New(NULL); }

  Position* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // float h = 4;
  void clear_h();
  static const int kHFieldNumber = 4;
  float h() const;
  void set_h(float value);

  // @@protoc_insertion_point(class_scope:eqproto.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float h_;
  mutable int _cached_size_;
  friend struct protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntityEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eqproto.EntityEvent) */ {
 public:
  EntityEvent();
  virtual ~EntityEvent();

  EntityEvent(const EntityEvent& from);

  inline EntityEvent& operator=(const EntityEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntityEvent(EntityEvent&& from) noexcept
    : EntityEvent() {
    *this = ::std::move(from);
  }

  inline EntityEvent& operator=(EntityEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityEvent& default_instance();

  static inline const EntityEvent* internal_default_instance() {
    return reinterpret_cast<const EntityEvent*>(
               &_EntityEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(EntityEvent* other);
  friend void swap(EntityEvent& a, EntityEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  EntityEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntityEvent& from);
  void MergeFrom(const EntityEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntityEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .eqproto.Entity entity = 1;
  bool has_entity() const;
  void clear_entity();
  static const int kEntityFieldNumber = 1;
  const ::eqproto::Entity& entity() const;
  ::eqproto::Entity* mutable_entity();
  ::eqproto::Entity* release_entity();
  void set_allocated_entity(::eqproto::Entity* entity);

  // .eqproto.Entity target = 3;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 3;
  const ::eqproto::Entity& target() const;
  ::eqproto::Entity* mutable_target();
  ::eqproto::Entity* release_target();
  void set_allocated_target(::eqproto::Entity* target);

  // .eqproto.OpCode op = 2;
  void clear_op();
  static const int kOpFieldNumber = 2;
  ::eqproto::OpCode op() const;
  void set_op(::eqproto::OpCode value);

  // @@protoc_insertion_point(class_scope:eqproto.EntityEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::eqproto::Entity* entity_;
  ::eqproto::Entity* target_;
  int op_;
  mutable int _cached_size_;
  friend struct protobuf_message_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChannelMessage

// int32 chan_num = 1;
inline void ChannelMessage::clear_chan_num() {
  chan_num_ = 0;
}
inline ::google::protobuf::int32 ChannelMessage::chan_num() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.chan_num)
  return chan_num_;
}
inline void ChannelMessage::set_chan_num(::google::protobuf::int32 value) {
  
  chan_num_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.chan_num)
}

// int32 language = 2;
inline void ChannelMessage::clear_language() {
  language_ = 0;
}
inline ::google::protobuf::int32 ChannelMessage::language() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.language)
  return language_;
}
inline void ChannelMessage::set_language(::google::protobuf::int32 value) {
  
  language_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.language)
}

// string from = 3;
inline void ChannelMessage::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelMessage::from() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.from)
  return from_.GetNoArena();
}
inline void ChannelMessage::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.from)
}
#if LANG_CXX11
inline void ChannelMessage::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eqproto.ChannelMessage.from)
}
#endif
inline void ChannelMessage::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eqproto.ChannelMessage.from)
}
inline void ChannelMessage::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eqproto.ChannelMessage.from)
}
inline ::std::string* ChannelMessage::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:eqproto.ChannelMessage.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelMessage::release_from() {
  // @@protoc_insertion_point(field_release:eqproto.ChannelMessage.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelMessage::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:eqproto.ChannelMessage.from)
}

// string to = 4;
inline void ChannelMessage::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelMessage::to() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.to)
  return to_.GetNoArena();
}
inline void ChannelMessage::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.to)
}
#if LANG_CXX11
inline void ChannelMessage::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eqproto.ChannelMessage.to)
}
#endif
inline void ChannelMessage::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eqproto.ChannelMessage.to)
}
inline void ChannelMessage::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eqproto.ChannelMessage.to)
}
inline ::std::string* ChannelMessage::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:eqproto.ChannelMessage.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelMessage::release_to() {
  // @@protoc_insertion_point(field_release:eqproto.ChannelMessage.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelMessage::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:eqproto.ChannelMessage.to)
}

// string message = 5;
inline void ChannelMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelMessage::message() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.message)
  return message_.GetNoArena();
}
inline void ChannelMessage::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.message)
}
#if LANG_CXX11
inline void ChannelMessage::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eqproto.ChannelMessage.message)
}
#endif
inline void ChannelMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eqproto.ChannelMessage.message)
}
inline void ChannelMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eqproto.ChannelMessage.message)
}
inline ::std::string* ChannelMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:eqproto.ChannelMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelMessage::release_message() {
  // @@protoc_insertion_point(field_release:eqproto.ChannelMessage.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:eqproto.ChannelMessage.message)
}

// int32 guilddbid = 6;
inline void ChannelMessage::clear_guilddbid() {
  guilddbid_ = 0;
}
inline ::google::protobuf::int32 ChannelMessage::guilddbid() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.guilddbid)
  return guilddbid_;
}
inline void ChannelMessage::set_guilddbid(::google::protobuf::int32 value) {
  
  guilddbid_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.guilddbid)
}

// string deliverto = 7;
inline void ChannelMessage::clear_deliverto() {
  deliverto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelMessage::deliverto() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.deliverto)
  return deliverto_.GetNoArena();
}
inline void ChannelMessage::set_deliverto(const ::std::string& value) {
  
  deliverto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.deliverto)
}
#if LANG_CXX11
inline void ChannelMessage::set_deliverto(::std::string&& value) {
  
  deliverto_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eqproto.ChannelMessage.deliverto)
}
#endif
inline void ChannelMessage::set_deliverto(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deliverto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eqproto.ChannelMessage.deliverto)
}
inline void ChannelMessage::set_deliverto(const char* value, size_t size) {
  
  deliverto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eqproto.ChannelMessage.deliverto)
}
inline ::std::string* ChannelMessage::mutable_deliverto() {
  
  // @@protoc_insertion_point(field_mutable:eqproto.ChannelMessage.deliverto)
  return deliverto_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelMessage::release_deliverto() {
  // @@protoc_insertion_point(field_release:eqproto.ChannelMessage.deliverto)
  
  return deliverto_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelMessage::set_allocated_deliverto(::std::string* deliverto) {
  if (deliverto != NULL) {
    
  } else {
    
  }
  deliverto_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deliverto);
  // @@protoc_insertion_point(field_set_allocated:eqproto.ChannelMessage.deliverto)
}

// int32 type = 8;
inline void ChannelMessage::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 ChannelMessage::type() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.type)
  return type_;
}
inline void ChannelMessage::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.type)
}

// int32 minstatus = 9;
inline void ChannelMessage::clear_minstatus() {
  minstatus_ = 0;
}
inline ::google::protobuf::int32 ChannelMessage::minstatus() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.minstatus)
  return minstatus_;
}
inline void ChannelMessage::set_minstatus(::google::protobuf::int32 value) {
  
  minstatus_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.minstatus)
}

// int32 fromadmin = 10;
inline void ChannelMessage::clear_fromadmin() {
  fromadmin_ = 0;
}
inline ::google::protobuf::int32 ChannelMessage::fromadmin() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.fromadmin)
  return fromadmin_;
}
inline void ChannelMessage::set_fromadmin(::google::protobuf::int32 value) {
  
  fromadmin_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.fromadmin)
}

// bool noreply = 11;
inline void ChannelMessage::clear_noreply() {
  noreply_ = false;
}
inline bool ChannelMessage::noreply() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.noreply)
  return noreply_;
}
inline void ChannelMessage::set_noreply(bool value) {
  
  noreply_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.noreply)
}

// bool is_emote = 12;
inline void ChannelMessage::clear_is_emote() {
  is_emote_ = false;
}
inline bool ChannelMessage::is_emote() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.is_emote)
  return is_emote_;
}
inline void ChannelMessage::set_is_emote(bool value) {
  
  is_emote_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.is_emote)
}

// int32 queued = 13;
inline void ChannelMessage::clear_queued() {
  queued_ = 0;
}
inline ::google::protobuf::int32 ChannelMessage::queued() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.queued)
  return queued_;
}
inline void ChannelMessage::set_queued(::google::protobuf::int32 value) {
  
  queued_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.queued)
}

// int32 zone_id = 14;
inline void ChannelMessage::clear_zone_id() {
  zone_id_ = 0;
}
inline ::google::protobuf::int32 ChannelMessage::zone_id() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.zone_id)
  return zone_id_;
}
inline void ChannelMessage::set_zone_id(::google::protobuf::int32 value) {
  
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.zone_id)
}

// -------------------------------------------------------------------

// CommandMessage

// string author = 1;
inline void CommandMessage::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommandMessage::author() const {
  // @@protoc_insertion_point(field_get:eqproto.CommandMessage.author)
  return author_.GetNoArena();
}
inline void CommandMessage::set_author(const ::std::string& value) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eqproto.CommandMessage.author)
}
#if LANG_CXX11
inline void CommandMessage::set_author(::std::string&& value) {
  
  author_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eqproto.CommandMessage.author)
}
#endif
inline void CommandMessage::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eqproto.CommandMessage.author)
}
inline void CommandMessage::set_author(const char* value, size_t size) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eqproto.CommandMessage.author)
}
inline ::std::string* CommandMessage::mutable_author() {
  
  // @@protoc_insertion_point(field_mutable:eqproto.CommandMessage.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommandMessage::release_author() {
  // @@protoc_insertion_point(field_release:eqproto.CommandMessage.author)
  
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommandMessage::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    
  } else {
    
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:eqproto.CommandMessage.author)
}

// string command = 2;
inline void CommandMessage::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommandMessage::command() const {
  // @@protoc_insertion_point(field_get:eqproto.CommandMessage.command)
  return command_.GetNoArena();
}
inline void CommandMessage::set_command(const ::std::string& value) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eqproto.CommandMessage.command)
}
#if LANG_CXX11
inline void CommandMessage::set_command(::std::string&& value) {
  
  command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eqproto.CommandMessage.command)
}
#endif
inline void CommandMessage::set_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eqproto.CommandMessage.command)
}
inline void CommandMessage::set_command(const char* value, size_t size) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eqproto.CommandMessage.command)
}
inline ::std::string* CommandMessage::mutable_command() {
  
  // @@protoc_insertion_point(field_mutable:eqproto.CommandMessage.command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommandMessage::release_command() {
  // @@protoc_insertion_point(field_release:eqproto.CommandMessage.command)
  
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommandMessage::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    
  } else {
    
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:eqproto.CommandMessage.command)
}

// repeated string params = 3;
inline int CommandMessage::params_size() const {
  return params_.size();
}
inline void CommandMessage::clear_params() {
  params_.Clear();
}
inline const ::std::string& CommandMessage::params(int index) const {
  // @@protoc_insertion_point(field_get:eqproto.CommandMessage.params)
  return params_.Get(index);
}
inline ::std::string* CommandMessage::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:eqproto.CommandMessage.params)
  return params_.Mutable(index);
}
inline void CommandMessage::set_params(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:eqproto.CommandMessage.params)
  params_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CommandMessage::set_params(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:eqproto.CommandMessage.params)
  params_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CommandMessage::set_params(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eqproto.CommandMessage.params)
}
inline void CommandMessage::set_params(int index, const char* value, size_t size) {
  params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eqproto.CommandMessage.params)
}
inline ::std::string* CommandMessage::add_params() {
  // @@protoc_insertion_point(field_add_mutable:eqproto.CommandMessage.params)
  return params_.Add();
}
inline void CommandMessage::add_params(const ::std::string& value) {
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eqproto.CommandMessage.params)
}
#if LANG_CXX11
inline void CommandMessage::add_params(::std::string&& value) {
  params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:eqproto.CommandMessage.params)
}
#endif
inline void CommandMessage::add_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eqproto.CommandMessage.params)
}
inline void CommandMessage::add_params(const char* value, size_t size) {
  params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eqproto.CommandMessage.params)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommandMessage::params() const {
  // @@protoc_insertion_point(field_list:eqproto.CommandMessage.params)
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommandMessage::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:eqproto.CommandMessage.params)
  return &params_;
}

// string result = 4;
inline void CommandMessage::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommandMessage::result() const {
  // @@protoc_insertion_point(field_get:eqproto.CommandMessage.result)
  return result_.GetNoArena();
}
inline void CommandMessage::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eqproto.CommandMessage.result)
}
#if LANG_CXX11
inline void CommandMessage::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eqproto.CommandMessage.result)
}
#endif
inline void CommandMessage::set_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eqproto.CommandMessage.result)
}
inline void CommandMessage::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eqproto.CommandMessage.result)
}
inline ::std::string* CommandMessage::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:eqproto.CommandMessage.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommandMessage::release_result() {
  // @@protoc_insertion_point(field_release:eqproto.CommandMessage.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommandMessage::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:eqproto.CommandMessage.result)
}

// -------------------------------------------------------------------

// DailyGain

// int32 account_id = 1;
inline void DailyGain::clear_account_id() {
  account_id_ = 0;
}
inline ::google::protobuf::int32 DailyGain::account_id() const {
  // @@protoc_insertion_point(field_get:eqproto.DailyGain.account_id)
  return account_id_;
}
inline void DailyGain::set_account_id(::google::protobuf::int32 value) {
  
  account_id_ = value;
  // @@protoc_insertion_point(field_set:eqproto.DailyGain.account_id)
}

// int32 character_id = 2;
inline void DailyGain::clear_character_id() {
  character_id_ = 0;
}
inline ::google::protobuf::int32 DailyGain::character_id() const {
  // @@protoc_insertion_point(field_get:eqproto.DailyGain.character_id)
  return character_id_;
}
inline void DailyGain::set_character_id(::google::protobuf::int32 value) {
  
  character_id_ = value;
  // @@protoc_insertion_point(field_set:eqproto.DailyGain.character_id)
}

// int32 levels_gained = 3;
inline void DailyGain::clear_levels_gained() {
  levels_gained_ = 0;
}
inline ::google::protobuf::int32 DailyGain::levels_gained() const {
  // @@protoc_insertion_point(field_get:eqproto.DailyGain.levels_gained)
  return levels_gained_;
}
inline void DailyGain::set_levels_gained(::google::protobuf::int32 value) {
  
  levels_gained_ = value;
  // @@protoc_insertion_point(field_set:eqproto.DailyGain.levels_gained)
}

// int32 experience_gained = 4;
inline void DailyGain::clear_experience_gained() {
  experience_gained_ = 0;
}
inline ::google::protobuf::int32 DailyGain::experience_gained() const {
  // @@protoc_insertion_point(field_get:eqproto.DailyGain.experience_gained)
  return experience_gained_;
}
inline void DailyGain::set_experience_gained(::google::protobuf::int32 value) {
  
  experience_gained_ = value;
  // @@protoc_insertion_point(field_set:eqproto.DailyGain.experience_gained)
}

// int32 money_earned = 5;
inline void DailyGain::clear_money_earned() {
  money_earned_ = 0;
}
inline ::google::protobuf::int32 DailyGain::money_earned() const {
  // @@protoc_insertion_point(field_get:eqproto.DailyGain.money_earned)
  return money_earned_;
}
inline void DailyGain::set_money_earned(::google::protobuf::int32 value) {
  
  money_earned_ = value;
  // @@protoc_insertion_point(field_set:eqproto.DailyGain.money_earned)
}

// string identity = 6;
inline void DailyGain::clear_identity() {
  identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DailyGain::identity() const {
  // @@protoc_insertion_point(field_get:eqproto.DailyGain.identity)
  return identity_.GetNoArena();
}
inline void DailyGain::set_identity(const ::std::string& value) {
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eqproto.DailyGain.identity)
}
#if LANG_CXX11
inline void DailyGain::set_identity(::std::string&& value) {
  
  identity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eqproto.DailyGain.identity)
}
#endif
inline void DailyGain::set_identity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eqproto.DailyGain.identity)
}
inline void DailyGain::set_identity(const char* value, size_t size) {
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eqproto.DailyGain.identity)
}
inline ::std::string* DailyGain::mutable_identity() {
  
  // @@protoc_insertion_point(field_mutable:eqproto.DailyGain.identity)
  return identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DailyGain::release_identity() {
  // @@protoc_insertion_point(field_release:eqproto.DailyGain.identity)
  
  return identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DailyGain::set_allocated_identity(::std::string* identity) {
  if (identity != NULL) {
    
  } else {
    
  }
  identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identity);
  // @@protoc_insertion_point(field_set_allocated:eqproto.DailyGain.identity)
}

// -------------------------------------------------------------------

// Entity

// int32 id = 1;
inline void Entity::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Entity::id() const {
  // @@protoc_insertion_point(field_get:eqproto.Entity.id)
  return id_;
}
inline void Entity::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:eqproto.Entity.id)
}

// string name = 2;
inline void Entity::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entity::name() const {
  // @@protoc_insertion_point(field_get:eqproto.Entity.name)
  return name_.GetNoArena();
}
inline void Entity::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eqproto.Entity.name)
}
#if LANG_CXX11
inline void Entity::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eqproto.Entity.name)
}
#endif
inline void Entity::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eqproto.Entity.name)
}
inline void Entity::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eqproto.Entity.name)
}
inline ::std::string* Entity::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:eqproto.Entity.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entity::release_name() {
  // @@protoc_insertion_point(field_release:eqproto.Entity.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entity::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:eqproto.Entity.name)
}

// int32 type = 3;
inline void Entity::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 Entity::type() const {
  // @@protoc_insertion_point(field_get:eqproto.Entity.type)
  return type_;
}
inline void Entity::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eqproto.Entity.type)
}

// int32 hp = 4;
inline void Entity::clear_hp() {
  hp_ = 0;
}
inline ::google::protobuf::int32 Entity::hp() const {
  // @@protoc_insertion_point(field_get:eqproto.Entity.hp)
  return hp_;
}
inline void Entity::set_hp(::google::protobuf::int32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:eqproto.Entity.hp)
}

// int32 level = 5;
inline void Entity::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 Entity::level() const {
  // @@protoc_insertion_point(field_get:eqproto.Entity.level)
  return level_;
}
inline void Entity::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:eqproto.Entity.level)
}

// .eqproto.Position position = 6;
inline bool Entity::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void Entity::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::eqproto::Position& Entity::position() const {
  const ::eqproto::Position* p = position_;
  // @@protoc_insertion_point(field_get:eqproto.Entity.position)
  return p != NULL ? *p : *reinterpret_cast<const ::eqproto::Position*>(
      &::eqproto::_Position_default_instance_);
}
inline ::eqproto::Position* Entity::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::eqproto::Position;
  }
  // @@protoc_insertion_point(field_mutable:eqproto.Entity.position)
  return position_;
}
inline ::eqproto::Position* Entity::release_position() {
  // @@protoc_insertion_point(field_release:eqproto.Entity.position)
  
  ::eqproto::Position* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Entity::set_allocated_position(::eqproto::Position* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eqproto.Entity.position)
}

// int32 race = 7;
inline void Entity::clear_race() {
  race_ = 0;
}
inline ::google::protobuf::int32 Entity::race() const {
  // @@protoc_insertion_point(field_get:eqproto.Entity.race)
  return race_;
}
inline void Entity::set_race(::google::protobuf::int32 value) {
  
  race_ = value;
  // @@protoc_insertion_point(field_set:eqproto.Entity.race)
}

// int32 class = 8;
inline void Entity::clear_class_() {
  class__ = 0;
}
inline ::google::protobuf::int32 Entity::class_() const {
  // @@protoc_insertion_point(field_get:eqproto.Entity.class)
  return class__;
}
inline void Entity::set_class_(::google::protobuf::int32 value) {
  
  class__ = value;
  // @@protoc_insertion_point(field_set:eqproto.Entity.class)
}

// -------------------------------------------------------------------

// Position

// float x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:eqproto.Position.x)
  return x_;
}
inline void Position::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:eqproto.Position.x)
}

// float y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:eqproto.Position.y)
  return y_;
}
inline void Position::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:eqproto.Position.y)
}

// float z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:eqproto.Position.z)
  return z_;
}
inline void Position::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:eqproto.Position.z)
}

// float h = 4;
inline void Position::clear_h() {
  h_ = 0;
}
inline float Position::h() const {
  // @@protoc_insertion_point(field_get:eqproto.Position.h)
  return h_;
}
inline void Position::set_h(float value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:eqproto.Position.h)
}

// -------------------------------------------------------------------

// EntityEvent

// .eqproto.Entity entity = 1;
inline bool EntityEvent::has_entity() const {
  return this != internal_default_instance() && entity_ != NULL;
}
inline void EntityEvent::clear_entity() {
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) delete entity_;
  entity_ = NULL;
}
inline const ::eqproto::Entity& EntityEvent::entity() const {
  const ::eqproto::Entity* p = entity_;
  // @@protoc_insertion_point(field_get:eqproto.EntityEvent.entity)
  return p != NULL ? *p : *reinterpret_cast<const ::eqproto::Entity*>(
      &::eqproto::_Entity_default_instance_);
}
inline ::eqproto::Entity* EntityEvent::mutable_entity() {
  
  if (entity_ == NULL) {
    entity_ = new ::eqproto::Entity;
  }
  // @@protoc_insertion_point(field_mutable:eqproto.EntityEvent.entity)
  return entity_;
}
inline ::eqproto::Entity* EntityEvent::release_entity() {
  // @@protoc_insertion_point(field_release:eqproto.EntityEvent.entity)
  
  ::eqproto::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline void EntityEvent::set_allocated_entity(::eqproto::Entity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eqproto.EntityEvent.entity)
}

// .eqproto.OpCode op = 2;
inline void EntityEvent::clear_op() {
  op_ = 0;
}
inline ::eqproto::OpCode EntityEvent::op() const {
  // @@protoc_insertion_point(field_get:eqproto.EntityEvent.op)
  return static_cast< ::eqproto::OpCode >(op_);
}
inline void EntityEvent::set_op(::eqproto::OpCode value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:eqproto.EntityEvent.op)
}

// .eqproto.Entity target = 3;
inline bool EntityEvent::has_target() const {
  return this != internal_default_instance() && target_ != NULL;
}
inline void EntityEvent::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
}
inline const ::eqproto::Entity& EntityEvent::target() const {
  const ::eqproto::Entity* p = target_;
  // @@protoc_insertion_point(field_get:eqproto.EntityEvent.target)
  return p != NULL ? *p : *reinterpret_cast<const ::eqproto::Entity*>(
      &::eqproto::_Entity_default_instance_);
}
inline ::eqproto::Entity* EntityEvent::mutable_target() {
  
  if (target_ == NULL) {
    target_ = new ::eqproto::Entity;
  }
  // @@protoc_insertion_point(field_mutable:eqproto.EntityEvent.target)
  return target_;
}
inline ::eqproto::Entity* EntityEvent::release_target() {
  // @@protoc_insertion_point(field_release:eqproto.EntityEvent.target)
  
  ::eqproto::Entity* temp = target_;
  target_ = NULL;
  return temp;
}
inline void EntityEvent::set_allocated_target(::eqproto::Entity* target) {
  delete target_;
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eqproto.EntityEvent.target)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace eqproto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::eqproto::OpCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eqproto::OpCode>() {
  return ::eqproto::OpCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
