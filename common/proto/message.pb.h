// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace eqproto {
class ChannelMessage;
class ChannelMessageDefaultTypeInternal;
extern ChannelMessageDefaultTypeInternal _ChannelMessage_default_instance_;
class CommandMessage;
class CommandMessageDefaultTypeInternal;
extern CommandMessageDefaultTypeInternal _CommandMessage_default_instance_;
class DailyGain;
class DailyGainDefaultTypeInternal;
extern DailyGainDefaultTypeInternal _DailyGain_default_instance_;
class Entity;
class EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
class EntityEvent;
class EntityEventDefaultTypeInternal;
extern EntityEventDefaultTypeInternal _EntityEvent_default_instance_;
}  // namespace eqproto

namespace eqproto {

namespace protobuf_message_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_message_2eproto

// ===================================================================

class ChannelMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eqproto.ChannelMessage) */ {
 public:
  ChannelMessage();
  virtual ~ChannelMessage();

  ChannelMessage(const ChannelMessage& from);

  inline ChannelMessage& operator=(const ChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelMessage(ChannelMessage&& from) noexcept
    : ChannelMessage() {
    *this = ::std::move(from);
  }

  inline ChannelMessage& operator=(ChannelMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelMessage& default_instance();

  static inline const ChannelMessage* internal_default_instance() {
    return reinterpret_cast<const ChannelMessage*>(
               &_ChannelMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ChannelMessage* other);
  friend void swap(ChannelMessage& a, ChannelMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelMessage& from);
  void MergeFrom(const ChannelMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from = 3;
  void clear_from();
  static const int kFromFieldNumber = 3;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // string to = 4;
  void clear_to();
  static const int kToFieldNumber = 4;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // string message = 5;
  void clear_message();
  static const int kMessageFieldNumber = 5;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string deliverto = 7;
  void clear_deliverto();
  static const int kDelivertoFieldNumber = 7;
  const ::std::string& deliverto() const;
  void set_deliverto(const ::std::string& value);
  #if LANG_CXX11
  void set_deliverto(::std::string&& value);
  #endif
  void set_deliverto(const char* value);
  void set_deliverto(const char* value, size_t size);
  ::std::string* mutable_deliverto();
  ::std::string* release_deliverto();
  void set_allocated_deliverto(::std::string* deliverto);

  // int32 chan_num = 1;
  void clear_chan_num();
  static const int kChanNumFieldNumber = 1;
  ::google::protobuf::int32 chan_num() const;
  void set_chan_num(::google::protobuf::int32 value);

  // int32 language = 2;
  void clear_language();
  static const int kLanguageFieldNumber = 2;
  ::google::protobuf::int32 language() const;
  void set_language(::google::protobuf::int32 value);

  // int32 guilddbid = 6;
  void clear_guilddbid();
  static const int kGuilddbidFieldNumber = 6;
  ::google::protobuf::int32 guilddbid() const;
  void set_guilddbid(::google::protobuf::int32 value);

  // int32 type = 8;
  void clear_type();
  static const int kTypeFieldNumber = 8;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 minstatus = 9;
  void clear_minstatus();
  static const int kMinstatusFieldNumber = 9;
  ::google::protobuf::int32 minstatus() const;
  void set_minstatus(::google::protobuf::int32 value);

  // int32 fromadmin = 10;
  void clear_fromadmin();
  static const int kFromadminFieldNumber = 10;
  ::google::protobuf::int32 fromadmin() const;
  void set_fromadmin(::google::protobuf::int32 value);

  // bool noreply = 11;
  void clear_noreply();
  static const int kNoreplyFieldNumber = 11;
  bool noreply() const;
  void set_noreply(bool value);

  // bool is_emote = 12;
  void clear_is_emote();
  static const int kIsEmoteFieldNumber = 12;
  bool is_emote() const;
  void set_is_emote(bool value);

  // int32 queued = 13;
  void clear_queued();
  static const int kQueuedFieldNumber = 13;
  ::google::protobuf::int32 queued() const;
  void set_queued(::google::protobuf::int32 value);

  // int32 zone_id = 14;
  void clear_zone_id();
  static const int kZoneIdFieldNumber = 14;
  ::google::protobuf::int32 zone_id() const;
  void set_zone_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eqproto.ChannelMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr deliverto_;
  ::google::protobuf::int32 chan_num_;
  ::google::protobuf::int32 language_;
  ::google::protobuf::int32 guilddbid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 minstatus_;
  ::google::protobuf::int32 fromadmin_;
  bool noreply_;
  bool is_emote_;
  ::google::protobuf::int32 queued_;
  ::google::protobuf::int32 zone_id_;
  mutable int _cached_size_;
  friend struct protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommandMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eqproto.CommandMessage) */ {
 public:
  CommandMessage();
  virtual ~CommandMessage();

  CommandMessage(const CommandMessage& from);

  inline CommandMessage& operator=(const CommandMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommandMessage(CommandMessage&& from) noexcept
    : CommandMessage() {
    *this = ::std::move(from);
  }

  inline CommandMessage& operator=(CommandMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandMessage& default_instance();

  static inline const CommandMessage* internal_default_instance() {
    return reinterpret_cast<const CommandMessage*>(
               &_CommandMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CommandMessage* other);
  friend void swap(CommandMessage& a, CommandMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommandMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  CommandMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommandMessage& from);
  void MergeFrom(const CommandMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommandMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string params = 3;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::std::string& params(int index) const;
  ::std::string* mutable_params(int index);
  void set_params(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_params(int index, ::std::string&& value);
  #endif
  void set_params(int index, const char* value);
  void set_params(int index, const char* value, size_t size);
  ::std::string* add_params();
  void add_params(const ::std::string& value);
  #if LANG_CXX11
  void add_params(::std::string&& value);
  #endif
  void add_params(const char* value);
  void add_params(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& params() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_params();

  // string author = 1;
  void clear_author();
  static const int kAuthorFieldNumber = 1;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  #if LANG_CXX11
  void set_author(::std::string&& value);
  #endif
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);

  // string command = 2;
  void clear_command();
  static const int kCommandFieldNumber = 2;
  const ::std::string& command() const;
  void set_command(const ::std::string& value);
  #if LANG_CXX11
  void set_command(::std::string&& value);
  #endif
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  ::std::string* mutable_command();
  ::std::string* release_command();
  void set_allocated_command(::std::string* command);

  // string result = 4;
  void clear_result();
  static const int kResultFieldNumber = 4;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:eqproto.CommandMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> params_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  ::google::protobuf::internal::ArenaStringPtr command_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  mutable int _cached_size_;
  friend struct protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DailyGain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eqproto.DailyGain) */ {
 public:
  DailyGain();
  virtual ~DailyGain();

  DailyGain(const DailyGain& from);

  inline DailyGain& operator=(const DailyGain& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DailyGain(DailyGain&& from) noexcept
    : DailyGain() {
    *this = ::std::move(from);
  }

  inline DailyGain& operator=(DailyGain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DailyGain& default_instance();

  static inline const DailyGain* internal_default_instance() {
    return reinterpret_cast<const DailyGain*>(
               &_DailyGain_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DailyGain* other);
  friend void swap(DailyGain& a, DailyGain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DailyGain* New() const PROTOBUF_FINAL { return New(NULL); }

  DailyGain* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DailyGain& from);
  void MergeFrom(const DailyGain& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DailyGain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string identity = 6;
  void clear_identity();
  static const int kIdentityFieldNumber = 6;
  const ::std::string& identity() const;
  void set_identity(const ::std::string& value);
  #if LANG_CXX11
  void set_identity(::std::string&& value);
  #endif
  void set_identity(const char* value);
  void set_identity(const char* value, size_t size);
  ::std::string* mutable_identity();
  ::std::string* release_identity();
  void set_allocated_identity(::std::string* identity);

  // int32 account_id = 1;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::int32 account_id() const;
  void set_account_id(::google::protobuf::int32 value);

  // int32 character_id = 2;
  void clear_character_id();
  static const int kCharacterIdFieldNumber = 2;
  ::google::protobuf::int32 character_id() const;
  void set_character_id(::google::protobuf::int32 value);

  // int32 levels_gained = 3;
  void clear_levels_gained();
  static const int kLevelsGainedFieldNumber = 3;
  ::google::protobuf::int32 levels_gained() const;
  void set_levels_gained(::google::protobuf::int32 value);

  // int32 experience_gained = 4;
  void clear_experience_gained();
  static const int kExperienceGainedFieldNumber = 4;
  ::google::protobuf::int32 experience_gained() const;
  void set_experience_gained(::google::protobuf::int32 value);

  // int32 money_earned = 5;
  void clear_money_earned();
  static const int kMoneyEarnedFieldNumber = 5;
  ::google::protobuf::int32 money_earned() const;
  void set_money_earned(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eqproto.DailyGain)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr identity_;
  ::google::protobuf::int32 account_id_;
  ::google::protobuf::int32 character_id_;
  ::google::protobuf::int32 levels_gained_;
  ::google::protobuf::int32 experience_gained_;
  ::google::protobuf::int32 money_earned_;
  mutable int _cached_size_;
  friend struct protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Entity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eqproto.Entity) */ {
 public:
  Entity();
  virtual ~Entity();

  Entity(const Entity& from);

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Entity(Entity&& from) noexcept
    : Entity() {
    *this = ::std::move(from);
  }

  inline Entity& operator=(Entity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Entity& default_instance();

  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
               &_Entity_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Entity* other);
  friend void swap(Entity& a, Entity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Entity* New() const PROTOBUF_FINAL { return New(NULL); }

  Entity* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Entity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 hp = 4;
  void clear_hp();
  static const int kHpFieldNumber = 4;
  ::google::protobuf::int32 hp() const;
  void set_hp(::google::protobuf::int32 value);

  // int32 level = 5;
  void clear_level();
  static const int kLevelFieldNumber = 5;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eqproto.Entity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 level_;
  mutable int _cached_size_;
  friend struct protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntityEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eqproto.EntityEvent) */ {
 public:
  EntityEvent();
  virtual ~EntityEvent();

  EntityEvent(const EntityEvent& from);

  inline EntityEvent& operator=(const EntityEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntityEvent(EntityEvent&& from) noexcept
    : EntityEvent() {
    *this = ::std::move(from);
  }

  inline EntityEvent& operator=(EntityEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityEvent& default_instance();

  static inline const EntityEvent* internal_default_instance() {
    return reinterpret_cast<const EntityEvent*>(
               &_EntityEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(EntityEvent* other);
  friend void swap(EntityEvent& a, EntityEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  EntityEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntityEvent& from);
  void MergeFrom(const EntityEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntityEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .eqproto.Entity entity = 1;
  bool has_entity() const;
  void clear_entity();
  static const int kEntityFieldNumber = 1;
  const ::eqproto::Entity& entity() const;
  ::eqproto::Entity* mutable_entity();
  ::eqproto::Entity* release_entity();
  void set_allocated_entity(::eqproto::Entity* entity);

  // int32 event = 2;
  void clear_event();
  static const int kEventFieldNumber = 2;
  ::google::protobuf::int32 event() const;
  void set_event(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eqproto.EntityEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::eqproto::Entity* entity_;
  ::google::protobuf::int32 event_;
  mutable int _cached_size_;
  friend struct protobuf_message_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChannelMessage

// int32 chan_num = 1;
inline void ChannelMessage::clear_chan_num() {
  chan_num_ = 0;
}
inline ::google::protobuf::int32 ChannelMessage::chan_num() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.chan_num)
  return chan_num_;
}
inline void ChannelMessage::set_chan_num(::google::protobuf::int32 value) {
  
  chan_num_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.chan_num)
}

// int32 language = 2;
inline void ChannelMessage::clear_language() {
  language_ = 0;
}
inline ::google::protobuf::int32 ChannelMessage::language() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.language)
  return language_;
}
inline void ChannelMessage::set_language(::google::protobuf::int32 value) {
  
  language_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.language)
}

// string from = 3;
inline void ChannelMessage::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelMessage::from() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.from)
  return from_.GetNoArena();
}
inline void ChannelMessage::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.from)
}
#if LANG_CXX11
inline void ChannelMessage::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eqproto.ChannelMessage.from)
}
#endif
inline void ChannelMessage::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eqproto.ChannelMessage.from)
}
inline void ChannelMessage::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eqproto.ChannelMessage.from)
}
inline ::std::string* ChannelMessage::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:eqproto.ChannelMessage.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelMessage::release_from() {
  // @@protoc_insertion_point(field_release:eqproto.ChannelMessage.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelMessage::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:eqproto.ChannelMessage.from)
}

// string to = 4;
inline void ChannelMessage::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelMessage::to() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.to)
  return to_.GetNoArena();
}
inline void ChannelMessage::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.to)
}
#if LANG_CXX11
inline void ChannelMessage::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eqproto.ChannelMessage.to)
}
#endif
inline void ChannelMessage::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eqproto.ChannelMessage.to)
}
inline void ChannelMessage::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eqproto.ChannelMessage.to)
}
inline ::std::string* ChannelMessage::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:eqproto.ChannelMessage.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelMessage::release_to() {
  // @@protoc_insertion_point(field_release:eqproto.ChannelMessage.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelMessage::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:eqproto.ChannelMessage.to)
}

// string message = 5;
inline void ChannelMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelMessage::message() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.message)
  return message_.GetNoArena();
}
inline void ChannelMessage::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.message)
}
#if LANG_CXX11
inline void ChannelMessage::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eqproto.ChannelMessage.message)
}
#endif
inline void ChannelMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eqproto.ChannelMessage.message)
}
inline void ChannelMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eqproto.ChannelMessage.message)
}
inline ::std::string* ChannelMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:eqproto.ChannelMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelMessage::release_message() {
  // @@protoc_insertion_point(field_release:eqproto.ChannelMessage.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:eqproto.ChannelMessage.message)
}

// int32 guilddbid = 6;
inline void ChannelMessage::clear_guilddbid() {
  guilddbid_ = 0;
}
inline ::google::protobuf::int32 ChannelMessage::guilddbid() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.guilddbid)
  return guilddbid_;
}
inline void ChannelMessage::set_guilddbid(::google::protobuf::int32 value) {
  
  guilddbid_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.guilddbid)
}

// string deliverto = 7;
inline void ChannelMessage::clear_deliverto() {
  deliverto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelMessage::deliverto() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.deliverto)
  return deliverto_.GetNoArena();
}
inline void ChannelMessage::set_deliverto(const ::std::string& value) {
  
  deliverto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.deliverto)
}
#if LANG_CXX11
inline void ChannelMessage::set_deliverto(::std::string&& value) {
  
  deliverto_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eqproto.ChannelMessage.deliverto)
}
#endif
inline void ChannelMessage::set_deliverto(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deliverto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eqproto.ChannelMessage.deliverto)
}
inline void ChannelMessage::set_deliverto(const char* value, size_t size) {
  
  deliverto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eqproto.ChannelMessage.deliverto)
}
inline ::std::string* ChannelMessage::mutable_deliverto() {
  
  // @@protoc_insertion_point(field_mutable:eqproto.ChannelMessage.deliverto)
  return deliverto_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelMessage::release_deliverto() {
  // @@protoc_insertion_point(field_release:eqproto.ChannelMessage.deliverto)
  
  return deliverto_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelMessage::set_allocated_deliverto(::std::string* deliverto) {
  if (deliverto != NULL) {
    
  } else {
    
  }
  deliverto_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deliverto);
  // @@protoc_insertion_point(field_set_allocated:eqproto.ChannelMessage.deliverto)
}

// int32 type = 8;
inline void ChannelMessage::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 ChannelMessage::type() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.type)
  return type_;
}
inline void ChannelMessage::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.type)
}

// int32 minstatus = 9;
inline void ChannelMessage::clear_minstatus() {
  minstatus_ = 0;
}
inline ::google::protobuf::int32 ChannelMessage::minstatus() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.minstatus)
  return minstatus_;
}
inline void ChannelMessage::set_minstatus(::google::protobuf::int32 value) {
  
  minstatus_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.minstatus)
}

// int32 fromadmin = 10;
inline void ChannelMessage::clear_fromadmin() {
  fromadmin_ = 0;
}
inline ::google::protobuf::int32 ChannelMessage::fromadmin() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.fromadmin)
  return fromadmin_;
}
inline void ChannelMessage::set_fromadmin(::google::protobuf::int32 value) {
  
  fromadmin_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.fromadmin)
}

// bool noreply = 11;
inline void ChannelMessage::clear_noreply() {
  noreply_ = false;
}
inline bool ChannelMessage::noreply() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.noreply)
  return noreply_;
}
inline void ChannelMessage::set_noreply(bool value) {
  
  noreply_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.noreply)
}

// bool is_emote = 12;
inline void ChannelMessage::clear_is_emote() {
  is_emote_ = false;
}
inline bool ChannelMessage::is_emote() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.is_emote)
  return is_emote_;
}
inline void ChannelMessage::set_is_emote(bool value) {
  
  is_emote_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.is_emote)
}

// int32 queued = 13;
inline void ChannelMessage::clear_queued() {
  queued_ = 0;
}
inline ::google::protobuf::int32 ChannelMessage::queued() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.queued)
  return queued_;
}
inline void ChannelMessage::set_queued(::google::protobuf::int32 value) {
  
  queued_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.queued)
}

// int32 zone_id = 14;
inline void ChannelMessage::clear_zone_id() {
  zone_id_ = 0;
}
inline ::google::protobuf::int32 ChannelMessage::zone_id() const {
  // @@protoc_insertion_point(field_get:eqproto.ChannelMessage.zone_id)
  return zone_id_;
}
inline void ChannelMessage::set_zone_id(::google::protobuf::int32 value) {
  
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:eqproto.ChannelMessage.zone_id)
}

// -------------------------------------------------------------------

// CommandMessage

// string author = 1;
inline void CommandMessage::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommandMessage::author() const {
  // @@protoc_insertion_point(field_get:eqproto.CommandMessage.author)
  return author_.GetNoArena();
}
inline void CommandMessage::set_author(const ::std::string& value) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eqproto.CommandMessage.author)
}
#if LANG_CXX11
inline void CommandMessage::set_author(::std::string&& value) {
  
  author_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eqproto.CommandMessage.author)
}
#endif
inline void CommandMessage::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eqproto.CommandMessage.author)
}
inline void CommandMessage::set_author(const char* value, size_t size) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eqproto.CommandMessage.author)
}
inline ::std::string* CommandMessage::mutable_author() {
  
  // @@protoc_insertion_point(field_mutable:eqproto.CommandMessage.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommandMessage::release_author() {
  // @@protoc_insertion_point(field_release:eqproto.CommandMessage.author)
  
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommandMessage::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    
  } else {
    
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:eqproto.CommandMessage.author)
}

// string command = 2;
inline void CommandMessage::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommandMessage::command() const {
  // @@protoc_insertion_point(field_get:eqproto.CommandMessage.command)
  return command_.GetNoArena();
}
inline void CommandMessage::set_command(const ::std::string& value) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eqproto.CommandMessage.command)
}
#if LANG_CXX11
inline void CommandMessage::set_command(::std::string&& value) {
  
  command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eqproto.CommandMessage.command)
}
#endif
inline void CommandMessage::set_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eqproto.CommandMessage.command)
}
inline void CommandMessage::set_command(const char* value, size_t size) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eqproto.CommandMessage.command)
}
inline ::std::string* CommandMessage::mutable_command() {
  
  // @@protoc_insertion_point(field_mutable:eqproto.CommandMessage.command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommandMessage::release_command() {
  // @@protoc_insertion_point(field_release:eqproto.CommandMessage.command)
  
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommandMessage::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    
  } else {
    
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:eqproto.CommandMessage.command)
}

// repeated string params = 3;
inline int CommandMessage::params_size() const {
  return params_.size();
}
inline void CommandMessage::clear_params() {
  params_.Clear();
}
inline const ::std::string& CommandMessage::params(int index) const {
  // @@protoc_insertion_point(field_get:eqproto.CommandMessage.params)
  return params_.Get(index);
}
inline ::std::string* CommandMessage::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:eqproto.CommandMessage.params)
  return params_.Mutable(index);
}
inline void CommandMessage::set_params(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:eqproto.CommandMessage.params)
  params_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CommandMessage::set_params(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:eqproto.CommandMessage.params)
  params_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CommandMessage::set_params(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eqproto.CommandMessage.params)
}
inline void CommandMessage::set_params(int index, const char* value, size_t size) {
  params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eqproto.CommandMessage.params)
}
inline ::std::string* CommandMessage::add_params() {
  // @@protoc_insertion_point(field_add_mutable:eqproto.CommandMessage.params)
  return params_.Add();
}
inline void CommandMessage::add_params(const ::std::string& value) {
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eqproto.CommandMessage.params)
}
#if LANG_CXX11
inline void CommandMessage::add_params(::std::string&& value) {
  params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:eqproto.CommandMessage.params)
}
#endif
inline void CommandMessage::add_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eqproto.CommandMessage.params)
}
inline void CommandMessage::add_params(const char* value, size_t size) {
  params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eqproto.CommandMessage.params)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommandMessage::params() const {
  // @@protoc_insertion_point(field_list:eqproto.CommandMessage.params)
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommandMessage::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:eqproto.CommandMessage.params)
  return &params_;
}

// string result = 4;
inline void CommandMessage::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommandMessage::result() const {
  // @@protoc_insertion_point(field_get:eqproto.CommandMessage.result)
  return result_.GetNoArena();
}
inline void CommandMessage::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eqproto.CommandMessage.result)
}
#if LANG_CXX11
inline void CommandMessage::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eqproto.CommandMessage.result)
}
#endif
inline void CommandMessage::set_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eqproto.CommandMessage.result)
}
inline void CommandMessage::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eqproto.CommandMessage.result)
}
inline ::std::string* CommandMessage::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:eqproto.CommandMessage.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommandMessage::release_result() {
  // @@protoc_insertion_point(field_release:eqproto.CommandMessage.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommandMessage::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:eqproto.CommandMessage.result)
}

// -------------------------------------------------------------------

// DailyGain

// int32 account_id = 1;
inline void DailyGain::clear_account_id() {
  account_id_ = 0;
}
inline ::google::protobuf::int32 DailyGain::account_id() const {
  // @@protoc_insertion_point(field_get:eqproto.DailyGain.account_id)
  return account_id_;
}
inline void DailyGain::set_account_id(::google::protobuf::int32 value) {
  
  account_id_ = value;
  // @@protoc_insertion_point(field_set:eqproto.DailyGain.account_id)
}

// int32 character_id = 2;
inline void DailyGain::clear_character_id() {
  character_id_ = 0;
}
inline ::google::protobuf::int32 DailyGain::character_id() const {
  // @@protoc_insertion_point(field_get:eqproto.DailyGain.character_id)
  return character_id_;
}
inline void DailyGain::set_character_id(::google::protobuf::int32 value) {
  
  character_id_ = value;
  // @@protoc_insertion_point(field_set:eqproto.DailyGain.character_id)
}

// int32 levels_gained = 3;
inline void DailyGain::clear_levels_gained() {
  levels_gained_ = 0;
}
inline ::google::protobuf::int32 DailyGain::levels_gained() const {
  // @@protoc_insertion_point(field_get:eqproto.DailyGain.levels_gained)
  return levels_gained_;
}
inline void DailyGain::set_levels_gained(::google::protobuf::int32 value) {
  
  levels_gained_ = value;
  // @@protoc_insertion_point(field_set:eqproto.DailyGain.levels_gained)
}

// int32 experience_gained = 4;
inline void DailyGain::clear_experience_gained() {
  experience_gained_ = 0;
}
inline ::google::protobuf::int32 DailyGain::experience_gained() const {
  // @@protoc_insertion_point(field_get:eqproto.DailyGain.experience_gained)
  return experience_gained_;
}
inline void DailyGain::set_experience_gained(::google::protobuf::int32 value) {
  
  experience_gained_ = value;
  // @@protoc_insertion_point(field_set:eqproto.DailyGain.experience_gained)
}

// int32 money_earned = 5;
inline void DailyGain::clear_money_earned() {
  money_earned_ = 0;
}
inline ::google::protobuf::int32 DailyGain::money_earned() const {
  // @@protoc_insertion_point(field_get:eqproto.DailyGain.money_earned)
  return money_earned_;
}
inline void DailyGain::set_money_earned(::google::protobuf::int32 value) {
  
  money_earned_ = value;
  // @@protoc_insertion_point(field_set:eqproto.DailyGain.money_earned)
}

// string identity = 6;
inline void DailyGain::clear_identity() {
  identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DailyGain::identity() const {
  // @@protoc_insertion_point(field_get:eqproto.DailyGain.identity)
  return identity_.GetNoArena();
}
inline void DailyGain::set_identity(const ::std::string& value) {
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eqproto.DailyGain.identity)
}
#if LANG_CXX11
inline void DailyGain::set_identity(::std::string&& value) {
  
  identity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eqproto.DailyGain.identity)
}
#endif
inline void DailyGain::set_identity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eqproto.DailyGain.identity)
}
inline void DailyGain::set_identity(const char* value, size_t size) {
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eqproto.DailyGain.identity)
}
inline ::std::string* DailyGain::mutable_identity() {
  
  // @@protoc_insertion_point(field_mutable:eqproto.DailyGain.identity)
  return identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DailyGain::release_identity() {
  // @@protoc_insertion_point(field_release:eqproto.DailyGain.identity)
  
  return identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DailyGain::set_allocated_identity(::std::string* identity) {
  if (identity != NULL) {
    
  } else {
    
  }
  identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identity);
  // @@protoc_insertion_point(field_set_allocated:eqproto.DailyGain.identity)
}

// -------------------------------------------------------------------

// Entity

// int32 id = 1;
inline void Entity::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Entity::id() const {
  // @@protoc_insertion_point(field_get:eqproto.Entity.id)
  return id_;
}
inline void Entity::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:eqproto.Entity.id)
}

// string name = 2;
inline void Entity::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entity::name() const {
  // @@protoc_insertion_point(field_get:eqproto.Entity.name)
  return name_.GetNoArena();
}
inline void Entity::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eqproto.Entity.name)
}
#if LANG_CXX11
inline void Entity::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eqproto.Entity.name)
}
#endif
inline void Entity::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eqproto.Entity.name)
}
inline void Entity::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eqproto.Entity.name)
}
inline ::std::string* Entity::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:eqproto.Entity.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entity::release_name() {
  // @@protoc_insertion_point(field_release:eqproto.Entity.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entity::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:eqproto.Entity.name)
}

// int32 type = 3;
inline void Entity::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 Entity::type() const {
  // @@protoc_insertion_point(field_get:eqproto.Entity.type)
  return type_;
}
inline void Entity::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eqproto.Entity.type)
}

// int32 hp = 4;
inline void Entity::clear_hp() {
  hp_ = 0;
}
inline ::google::protobuf::int32 Entity::hp() const {
  // @@protoc_insertion_point(field_get:eqproto.Entity.hp)
  return hp_;
}
inline void Entity::set_hp(::google::protobuf::int32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:eqproto.Entity.hp)
}

// int32 level = 5;
inline void Entity::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 Entity::level() const {
  // @@protoc_insertion_point(field_get:eqproto.Entity.level)
  return level_;
}
inline void Entity::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:eqproto.Entity.level)
}

// -------------------------------------------------------------------

// EntityEvent

// .eqproto.Entity entity = 1;
inline bool EntityEvent::has_entity() const {
  return this != internal_default_instance() && entity_ != NULL;
}
inline void EntityEvent::clear_entity() {
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) delete entity_;
  entity_ = NULL;
}
inline const ::eqproto::Entity& EntityEvent::entity() const {
  const ::eqproto::Entity* p = entity_;
  // @@protoc_insertion_point(field_get:eqproto.EntityEvent.entity)
  return p != NULL ? *p : *reinterpret_cast<const ::eqproto::Entity*>(
      &::eqproto::_Entity_default_instance_);
}
inline ::eqproto::Entity* EntityEvent::mutable_entity() {
  
  if (entity_ == NULL) {
    entity_ = new ::eqproto::Entity;
  }
  // @@protoc_insertion_point(field_mutable:eqproto.EntityEvent.entity)
  return entity_;
}
inline ::eqproto::Entity* EntityEvent::release_entity() {
  // @@protoc_insertion_point(field_release:eqproto.EntityEvent.entity)
  
  ::eqproto::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline void EntityEvent::set_allocated_entity(::eqproto::Entity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eqproto.EntityEvent.entity)
}

// int32 event = 2;
inline void EntityEvent::clear_event() {
  event_ = 0;
}
inline ::google::protobuf::int32 EntityEvent::event() const {
  // @@protoc_insertion_point(field_get:eqproto.EntityEvent.event)
  return event_;
}
inline void EntityEvent::set_event(::google::protobuf::int32 value) {
  
  event_ = value;
  // @@protoc_insertion_point(field_set:eqproto.EntityEvent.event)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace eqproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
